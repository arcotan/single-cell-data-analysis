# COTAN analysis

```{r eval=TRUE, include=TRUE}
library(COTAN)
library(zeallot)
library(ggplot2)
library(factoextra)
library(qpdf)

source("./libraries/utils.R")
```

```{r}
outDir <- tempdir()
dataset_name = 'zheng-4'
dataset_path = './dataset/'

IN_DATA_DIR = paste(dataset_path, dataset_name, '-filtered/', sep="")
IN_LABEL_DIR = paste(dataset_path, dataset_name, '-filtered/', sep="")
```

```{r}
SSAMPLING = 0.2

data <- Read10X(paste(IN_DATA_DIR, '10X', sep=''))
# Retain only SSAMPLING of columns in data
set.seed(123)
data = data[, sample(ncol(data), floor(ncol(data) * SSAMPLING))]
```

```{r}
obj = COTAN(raw = data)
obj = initializeMetaDataset(obj,
                            GEO = "-",
                            sequencingMethod = "10x",
                            sampleCondition = dataset_name)

```

```{r}
# ECDPlot(obj, yCut = 700)

```

```{r}
# cellSizePlot(obj)
```

```{r}
obj <- clean(obj, genesCutoff=0, cellsCutoff=0)
# c(pcaCellsPlot, pcaCellsData, genesPlot, UDEPlot, nuPlot) %<-% cleanPlots(obj)
# pcaCellsPlot 
```

```{r}
# genesPlot
```

```{r}
# UDEPlot
```

```{r}
#  Threshold and MaxIteration ?
obj = estimateDispersionBisection(obj, cores = 7)

```

```{r}
outDir = paste('./COTAN/', dataset_name, sep="")
dir.create(outDir, recursive = TRUE, showWarnings = FALSE)
file_pos = paste(outDir, '/', dataset_name, '.cotan.RDS', sep = "")
```

```{r}
if (file.exists(file_pos)){
    obj <- readRDS(file.path(file_pos))
} else {
    # ActOnCells True ?
    obj <- calculateCoex(obj, actOnCells = TRUE)
    saveRDS(obj, file = file.path(file_pos))
}
```

## Clustering

It is possible to obtain a cell clusterization based on the concept of uniformity of expression of the genes across the cells. That is the cluster satisfies the null hypothesis of the `COTAN` model: the genes expression is not dependent on the cell in consideration.

```{r}
outDir = paste('./COTAN/', dataset_name, sep="")
```

```{r eval=FALSE, include=TRUE}
# TODO crash numero di dimensioni
# TODO ppure da l'errore:
# Error: 'VST.default' is not implemented yet
# Distance default o distance='euclidean' ?
fineClusters <- cellsUniformClustering(obj, GDIThreshold = 1.4, cores = 10,
                                       saveObj = TRUE, outDir = outDir)
```


```{r}
obj <- addClusterization(obj, clName = "FineClusters", clusters = fineClusters)
```

```{r eval=FALSE, include=TRUE}
c(coexDF, pValueDF) %<-% DEAOnClusters(obj, clusters = fineClusters)
obj <- addClusterizationCoex(obj, clName = "FineClusters",
                             coexDF = coexDF)
```

```{r eval=FALSE, include=TRUE}
c(mergedClusters, coexDF, pValueDF) %<-%
  mergeUniformCellsClusters(obj, clusters = fineClusters, GDIThreshold = 1.4, cores = 7,
                            saveObj = TRUE, outDir = outDir)
obj <- addClusterization(obj, clName = "MergedClusters",
                         clusters = mergedClusters, coexDF = coexDF)
```

```{r}
full_data <- Read10X(paste(IN_DATA_DIR, '10X', sep=''))
centroids = t(obj@clustersCoex$CL_MergedClusters)

# Cluster data in centroids (cosine distance)
km = kmeans(t(full_data), centroids, iter.max = 1, centers = 5)
```

```{r}
library(scater)
library(scran)

srat = CreateSeuratObject(counts = data, project = dataset_name, min.cells = 0, min.features = 0)

tl = read.csv(paste(IN_LABEL_DIR, 'labels.csv', sep=''), header=TRUE)

keep = (tl$cell %in% colnames(data))

true_ids = tl$cluster.ids[keep]

gdsce = as.SingleCellExperiment(srat)
gdsce = applySCE(gdsce, logNormCounts)
gdumap = runUMAP(gdsce)
colLabels(gdumap) <- factor(true_ids)
plotUMAP(gdumap, colour_by="label", text_by="label", text_color="red")
```

```{r eval=FALSE, include=TRUE}
# mergedUMAPPlot <- UMAPPlot(coexDF, elements = layersGenes,
                        #    title = "Fine Cluster UMAP Plot")
# mergedUMAPPlot <- UMAPPlot(coexDF)
# plot(mergedUMAPPlot)
```

```{r}
centroids = obj@clustersCoex$CL_MergedClusters

# Calculate distances between centroids
distances = dist(centroids, method = "euclidean")

```